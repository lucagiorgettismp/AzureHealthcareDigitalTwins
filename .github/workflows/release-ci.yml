name: Release CI

on:
  push:
    tags:
      - "v*.*.*"
  
env:
  SIMULATOR_SOLUTION_PATH: '.\HealthcareVitalSignsMonitor\Simulator\Simulator.csproj'
  CLIENT_SOLUTION_PATH: '.\HealthcareVitalSignsMonitor\Client\Client.csproj'
  PACKAGES_PATH: '.\HealthcareVitalSignsMonitor\packages\'  
  
jobs:
  # Build simulator
  build-simulator:
    runs-on: [windows-latest]

    steps:
      - uses: actions/checkout@v2
      
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1
  
      - name: Setup NuGet.exe
        uses: NuGet/setup-nuget@v1.0.5

      - name: Restore NuGet packages
        run: nuget restore ${{ env.SIMULATOR_SOLUTION_PATH }} -PackagesDirectory ${{ env.PACKAGES_PATH }}
        
      - name: Build
        run: msbuild ${{ env.SIMULATOR_SOLUTION_PATH }} /p:Configuration=Release
        
      - name: Zip Simulator
        # You may pin to the exact commit or the version.
        # uses: vimtor/action-zip@5f1c4aa587ea41db1110df6a99981dbe19cee310
        uses: vimtor/action-zip@v1
        with:
          # Files or directories to zip
          files: .\HealthcareVitalSignsMonitor\Simulator\bin\Release\
          # Name of output zip file
          dest: Simulator.zip
          # Whether to add subdirectories to simply zip all files to the root
          recursive: false # optional, default is true
              
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Simulator
          path: Simulator.zip
          
        
  # Build client
  build-client:
    runs-on: [windows-latest]

    steps:
      - uses: actions/checkout@v2
      
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.1
  
      - name: Setup NuGet.exe
        uses: NuGet/setup-nuget@v1.0.5

      - name: Restore NuGet packages
        run: nuget restore ${{ env.CLIENT_SOLUTION_PATH }} -PackagesDirectory ${{ env.PACKAGES_PATH }}
        
      - name: Build
        run: msbuild ${{ env.CLIENT_SOLUTION_PATH }} /p:Configuration=Release
              
      - name: Zip Client
        # You may pin to the exact commit or the version.
        # uses: vimtor/action-zip@5f1c4aa587ea41db1110df6a99981dbe19cee310
        uses: vimtor/action-zip@v1
        with:
          # Files or directories to zip
          files: .\HealthcareVitalSignsMonitor\Client\bin\Release\
          # Name of output zip file
          dest: Client.zip
          # Whether to add subdirectories to simply zip all files to the root
          recursive: false # optional, default is true
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Client
          path: Client.zip
      
  # Build report
  build-report:
    runs-on: [ubuntu-latest]

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v1
        
      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v2
        with:
          working_directory: doc
          pre_compile: "tlmgr update --self --all"
          root_file: main.tex
          args: "-lualatex --file-line-error --interaction=nonstopmode"
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Doc
          path: doc/main.pdf

  # Create a release 
  release:
    runs-on: [windows-latest]
    needs: [build-report, build-client, build-simulator]
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@master

    - uses: actions/download-artifact@master
      with:
        name: Simulator

    - uses: actions/download-artifact@master
      with:
        name: Client
        
    - uses: actions/download-artifact@master
      with:
        name: Doc
        
    - name: Release
    # You may pin to the exact commit or the version.
    # uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
      uses: softprops/action-gh-release@v0.1.14
      with:
        # Note-worthy description of changes in release
        # body: # optional
        # Path to load note-worthy description of changes in release from
        body_path: "./release_body.txt"
        # Gives the release a custom name. Defaults to tag name
        # name: # optional
        # Gives a tag name. Defaults to github.GITHUB_REF
        # tag_name: # optional
        # Creates a draft release. Defaults to false
        # draft: # optional
        # Identify the release as a prerelease. Defaults to false
        # prerelease: # optional
        # Newline-delimited list of path globs for asset files to upload
        files: |
          Simulator.zip
          Client.zip
          main.pdf
        
        # Fails if any of the `files` globs match nothing. Defaults to false
        fail_on_unmatched_files: true
        # Repository to make releases against, in <owner>/<repo> format
        # repository: # optional
        # Authorized secret GitHub Personal Access Token. Defaults to github.token
        # token: # optional, default is ${{ github.token }}
        # Commitish value that determines where the Git tag is created from. Can be any branch or commit SHA.
        # target_commitish: # optional
        # If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored.
        # discussion_category_name: # optional
        # Whether to automatically generate the name and body for this release. If name is specified, the specified name will be used; otherwise, a name will be automatically generated. If body is specified, the body will be pre-pended to the automatically generated notes.
        # generate_release_notes: # optional
  
  # Send a failure message Telegram
  jobs-failure:
    needs: [build-report, build-client, build-simulator, release]
    if: failure()
    runs-on: [ubuntu-latest]

    steps:
    - name: Send telegram failure message to Luca
      uses: appleboy/telegram-action@master

      with:
        to: ${{ secrets.TELEGRAM_TO_LUCA }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
              ${{ github.event_name }} event,
              on github.com/${{ github.repository }},
              by ${{ github.actor }}:
              <b>${{ github.event.head_commit.message }}</b>
              ❌ <b>FAILED</b> ❌
        format: html
        disable_web_page_preview: true

    - name: Send telegram failure message to Lorenzo
      uses: appleboy/telegram-action@master

      with:
        to: ${{ secrets.TELEGRAM_TO_LORENZO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
              ${{ github.event_name }} event,
              on github.com/${{ github.repository }},
              by ${{ github.actor }}:
              <b>${{ github.event.head_commit.message }}</b>
              ❌ <b>FAILED</b> ❌
        format: html
        disable_web_page_preview: true

   # Send a success message Telegram
  jobs-success:
    needs: [build-report, build-client, build-simulator, release]
    if: success()
    runs-on: [ubuntu-latest]

    steps:
    - name: Send telegram success message to Luca
      uses: appleboy/telegram-action@master

      with:
        to: ${{ secrets.TELEGRAM_TO_LUCA }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
              ${{ github.event_name }} event,
              on github.com/${{ github.repository }},
              by ${{ github.actor }}:
              <b>${{ github.event.head_commit.message }}</b>
              ✅ <b>SUCCEDED</b> ✅
        format: html
        disable_web_page_preview: true

    - name: Send telegram success message to Lorenzo
      uses: appleboy/telegram-action@master

      with:
        to: ${{ secrets.TELEGRAM_TO_LORENZO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
              ${{ github.event_name }} event,
              on github.com/${{ github.repository }},
              by ${{ github.actor }}:
              <b>${{ github.event.head_commit.message }}</b>
              ✅ <b>SUCCEDED</b> ✅
        format: html
        disable_web_page_preview: true
